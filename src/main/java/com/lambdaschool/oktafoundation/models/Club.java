package com.lambdaschool.oktafoundation.models;


import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.hibernate.annotations.NaturalId;
import org.hibernate.annotations.NaturalIdCache;

import javax.persistence.*;
import java.util.HashSet;
import java.util.Set;

/**
 * The entity allowing interaction with the clubs table
 */
@ApiModel
@Entity(name = "Club")
@Table(name = "clubs")
@NaturalIdCache
public class Club
    extends Auditable
{

    @ApiModelProperty(
            name = "Club Id",
            value = "primary key for club",
            required = true,
            example = "1"
    )
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO )
    private long clubid;


    /**
     * Part of the join relationship between Club and Activities
     * connects clubs to the club activities combination
     */
    @ApiModelProperty(
            name = "Club Activities Join Table",
            value = "Join Table",
            required = true
    )
    @OneToMany(mappedBy = "club",
    cascade = CascadeType.ALL,
    orphanRemoval = true)
    @JsonIgnoreProperties(value = {"club","reactions"}, allowSetters = true)
    private Set<ClubActivities> activities = new HashSet<>();

    /**
     * Part of the join relationship between Club and Users
     * connects clubs to the club users combination
     */
    @ApiModelProperty(
            name = "Club Users Join Table",
            value = "Join Table",
            required = true
    )
    @OneToMany(mappedBy = "club",
            cascade = CascadeType.ALL,
            orphanRemoval = true)
    @JsonIgnoreProperties(value = "club", allowSetters = true)
    private Set<ClubUsers> users = new HashSet<>();

    @OneToMany(mappedBy = "club",
            cascade = CascadeType.ALL,
            orphanRemoval = true)
    @JsonIgnoreProperties(value = "club", allowSetters = true)
    private Set<ClubMembers> members = new HashSet<>();


    /**
     * The clubname (String). Cannot be null and must be unique
     */
    @ApiModelProperty(
            name = "Club Name",
            value = "Name of the Club",
            required = true,
            example = "South Palmdale Club"
    )
    @NaturalId
    @Column(nullable = false, unique = true)
    private String clubname;

    /**
     * Default constructor used primarily by the JPA.
     */
    public Club() {
    }
    /**
     * Given the params, create a new club object
     * <p>
     * clubid is autogenerated
     *
     * @param clubname The clubname (String) of the Club
     */
    public Club(String clubname) {
        this.clubname = clubname;
    }
    /**
     * Getter for clubid
     *
     * @return the clubid (long) of the Club
     */
    public long getClubid() {
        return clubid;
    }
    /**
     * Setter for clubid. Used primary for seeding data
     *
     * @param clubid the new clubid (long) of the club
     */
    public void setClubid(long clubid) {
        this.clubid = clubid;
    }
    /**
     * Getter for club activity combinations
     *
     * @return A list of club activity combinations associated with this club
     */
    public Set<ClubActivities> getActivities() {
        return activities;
    }
    /**
     * Setter for club activity combinations
     *
     * @param activities Change the list of club activity combinations associated with this club to this one
     */
    public void setActivities(Set<ClubActivities> activities) {
        this.activities = activities;
    }
    /**
     * Getter for club user combinations
     *
     * @return A list of club user combinations associated with this club
     */
    public Set<ClubUsers> getUsers() {
        return users;
    }
    /**
     * Setter for club user combinations
     *
     * @param users Change the list of club user combinations associated with this club to this one
     */
    public void setUsers(Set<ClubUsers> users) {
        this.users = users;
    }
    /**
     * Getter for clubname
     *
     * @return the clubname (String) lowercase
     */
    public String getClubname() {
        return clubname;
    }
    /**
     * setter for clubname
     *
     * @param clubname the new clubname (String) converted to lowercase
     */
    public void setClubname(String clubname) {
        this.clubname = clubname.toLowerCase();
    }
}
